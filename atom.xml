<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>惊涛酒馆</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.jingtaobar.com/"/>
  <updated>2018-01-23T05:29:05.000Z</updated>
  <id>http://www.jingtaobar.com/</id>
  
  <author>
    <name>pacino</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git常用命令整理</title>
    <link href="http://www.jingtaobar.com/2017/11/17/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://www.jingtaobar.com/2017/11/17/git常用命令整理/</id>
    <published>2017-11-17T01:25:02.000Z</published>
    <updated>2018-01-23T05:29:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-常用命令整理"><a href="#Git-常用命令整理" class="headerlink" title="Git 常用命令整理"></a>Git 常用命令整理</h1><h2 id="1-Git-配置"><a href="#1-Git-配置" class="headerlink" title="1.Git 配置"></a>1.Git 配置</h2><h3 id="1-设置邮箱、用户名命令git-config"><a href="#1-设置邮箱、用户名命令git-config" class="headerlink" title="1.设置邮箱、用户名命令git config:"></a>1.设置邮箱、用户名命令<code>git config</code>:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;your name&quot;      // 设置全局用户名</div><div class="line">git config --global user.email &quot;your email&quot;    // 设置邮箱</div><div class="line">``` </div><div class="line">--global 指定为全局配置，不使用该参数，则为当前所在仓库配置。</div><div class="line"></div><div class="line">### 2.查看所有的已经做出的配置：</div></pre></td></tr></table></figure><p>git config -l<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line">## 2.Git 基础操作</div><div class="line"></div><div class="line">### 1. 创建 Git 版本库</div><div class="line">进入到该目录所在路径，然后执行：</div></pre></td></tr></table></figure></p><p>git init<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">查看目录结构中，就可以看到包含有 .git 子目录，这就说明创建版本库成功.</div><div class="line"></div><div class="line">### 2. 将文件添加到版本库</div><div class="line">1.  将文件添加到暂存区，使用的是 `git add`：</div></pre></td></tr></table></figure></p><p>git add name.type        // 添加单个文件到暂存区<br>git add .                // 将当前目录下所有修改添加到暂存区，除按照规则忽略的之外<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2.  将暂存区中的文件，提交到仓库中。需要使用 `git commit`：</div></pre></td></tr></table></figure></p><p>git commit -m ‘your comments’         // 带评论提交，用于说明提交内容、变更、作用等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 3. 查看仓库的状态</div><div class="line">新建了文件，将文件加入暂存区，或者其他的修改等等</div></pre></td></tr></table></figure></p><p>git status<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 4. 查看仓库中的具体修改</div><div class="line">通过 `git diff` 来查看具体的修改内容</div></pre></td></tr></table></figure></p><p>git diff    // 查看版本库中所有的改动<br>git diff name.type        // 查看具体文件的改动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 5. 查看提交历史记录</div><div class="line">有的时候，你会需要查看自己做过哪些提交，来回顾自己完成的部分。或者需要寻找某个具体的提交来查看当时的代码。这里需要用到：</div></pre></td></tr></table></figure></p><p>git log     // 显示所有提交的历史记录<br>git log –pretty=oneline    // 单行显示提交历史记录的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">在 `git log` 的输出内容中，可以看到每次提交的 ID，是一个 40 位的字符串。</div><div class="line"></div><div class="line">### 6. 版本回退</div><div class="line">有了 `git log` 来查看提交的历史记录，我们就可以通过 `git reset --hard` 来回退到我们需要的特定版本，然后使用当时的代码进行各种操作。</div></pre></td></tr></table></figure></p><p>git reset –hard HEAD^        // 回退到上一个提交版本<br>git reset –hard HEAD^^        // 回退到上上一个提交版本<br>git reset –hard ‘commit_id’    // 会退到 commit_id 指定的提交版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 7. 回到未来的某个提交</div><div class="line">当退回到某个提交的版本以后，再通过 `git log` 是无法显示在这之后的提交信息的。但是，通过 `git reflog` 可以获取到操作命令的历史。</div><div class="line"></div><div class="line">因此，想要回到未来的某个提交，先通过 `git reflog` 从历史命令中找到想要回到的提交版本的 ID，然后通过 `git reset --hard`来切换。</div></pre></td></tr></table></figure><p>git reflog<br>git reset –hard ‘commit_id’</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 8. 撤销修改</div><div class="line">1. 丢弃工作区中文件的修改</div></pre></td></tr></table></figure><p>git checkout – Readme.md    // 如果 Readme.md 文件在工作区，则丢弃其修改<br>git checkout – .            // 丢弃当前目录下所有工作区中文件的修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 丢弃已经进入暂存区的修改</div></pre></td></tr></table></figure></p><p>git reset HEAD name.type // 将 Readme.md 恢复到 HEAD 提交版本的状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### 9. 删除文件</div><div class="line">在文件未添加到暂存区之前，对想删除文件可以直接物理删除。或者通过` git checkout -- file` 来丢弃。如果文件已经被提交，则需要` git rm` 来删除：</div></pre></td></tr></table></figure></p><p>git rm Readme.md // 删除已经被提交过的 Readme.md<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; 注意：` git rm `只能删除已经提交到版本库中的文件。其他状态的文件直接用这个命令操作是出错的。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">## 3.分支管理</div><div class="line">### 1. 查看分支</div><div class="line">查看分支使用 `git branch`：</div></pre></td></tr></table></figure></p><p>git branch        // 查看本地分支信息<br>git branch -v     // 查看相对详细的本地分支信息<br>git branch -av     // 查看包括远程仓库在内的分支信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; 注意：在 git branch 的输出内容中，有一个分支，前面带有 * 号，这标识我们当前所在的分支。</div><div class="line"></div><div class="line">### 2. 创建分支</div><div class="line">当我们要修复一个 Bug，或者开发一个新特性，甚至是在初学的时候怕打乱原来的代码，都可以新建一个分支来避免对原来代码的影响。</div></pre></td></tr></table></figure></p><p>git branch dev // 新建一个名称为 dev 的分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 3. 切换分支</div><div class="line"></div><div class="line">当我们创建完分支以后，我们需要切换到新建的分支，否则，所有的修改，还是在原来的分支上。事实上，所有的改动，只能影响到当前所在的分支。</div></pre></td></tr></table></figure></p><p>git checkout dev // 新建完 dev 分支以后，通过该命令切换到 dev 分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 4. 创建并切换分支</div></pre></td></tr></table></figure></p><p>git checkout -b dev // 新建 dev 分支，并切换到该分支上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">这个命令合并了前两个独立的命令，平常使用中一般这样使用。</div><div class="line"></div><div class="line">### 5. 合并分支</div><div class="line"></div><div class="line">当我们修复完成一个 Bug，或者开发完成一个新特性，我们就会把相关的 Bug 或者 特性的上修改合并回原来的主分支上，这时候就需要 `git merge` 来做分支的合并。</div><div class="line"></div><div class="line">首先需要切换回最终要合并到的分支，如 master：</div></pre></td></tr></table></figure></p><p>git checkout master        // 切换回 master 分支<br>git merge dev            // 将 dev 分钟中的修改合并回 master 分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">合并回主分支的时候，后面可能会面临到冲突的问题。冲突的解决暂不在这里说明。</div><div class="line"></div><div class="line">### 6. 删除分支</div><div class="line"></div><div class="line">当之前创建的分支，完成了它的使命，如 Bug 修复完，分支合并以后，这个分支就不在需要了，就可以删除它。</div></pre></td></tr></table></figure></p><p>git branch -d dev // 删除 dev 分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">---</div><div class="line">## 4.分支管理</div><div class="line">上面的所有命令都是针对本地仓库的操作。当我们希望多个人来协作时，会将代码发布到一个统一的远程仓库，然后多个人在本地操作以后，在推送到远程仓库。其他人协作时，需要先同步远程仓库的内容，再推送自己的修改。</div><div class="line">### 1. 从远程仓库克隆</div><div class="line"></div><div class="line">如果你本地没有仓库，希望从已有的远程仓库上复制一份代码，那么你需要 `git clone`。</div></pre></td></tr></table></figure></p><p>git clone <a href="https://github.com/git/git.git" target="_blank" rel="external">https://github.com/git/git.git</a>     // 通过 https 协议，克隆 Github 上 git 仓库的源码<br>git clone linfuyan@github.com/git/git.git    // 通过 ssh 协议，克隆 Github 上 git 仓库的源码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&gt; 注意： git clone 后面的仓库地址，可以支持多种协议，如 https， ssh 等。</div><div class="line"></div><div class="line">### 2. 添加远程仓库</div><div class="line">如果你已经有了一个本地仓库，如之前创建的 `git-guide`，然后你打算将它发布到远程，供其他人协作。那么使用：</div></pre></td></tr></table></figure></p><p>git remote add origin your_remote_git_repo // 为本地仓库添加远程仓库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 3. 推送本地的内容到远程仓库</div><div class="line"></div><div class="line">当本地仓库中，代码完成提交，就需要将代码等推送到远程仓库，这样其他协作人员可以从远程仓库同步内容。</div></pre></td></tr></table></figure></p><p>git push -u origin master // 第一次推送时使用，可以简化后面的推送或者拉取命令使用<br>git push origin master    // 将本地 master 分支推送到 origin 远程分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&gt; 注意： 注意： git push -u origin master，第一次使用时，带上 -u 参数，在将本地的 master 分支推送到远程新的 master 分支的同时，还会把本地的 master 分支和远程的 master 分支关联起来。</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">### 4. 从远程仓库获取最新内容</div><div class="line">在多人协作过程中，当自己完成了本地仓库中的提交，想要向远程仓库推送前，需要先获取到远程仓库的最新内容。</div><div class="line">可以通过 `git fetch` 和 `git pull` 来获取远程仓库的内容。</div></pre></td></tr></table></figure></p><p>git fetch origin master<br>git pull origin master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">`git fetch` 和 `git pull` 之间的区别：</div><div class="line">- `git fetch` 是仅仅获取远程仓库的更新内容，并不会自动做合并。</div><div class="line">- `git pull` 在获取远程仓库的内容后，会自动做合并，可以看成 `git fetch` 之后 `git merge`。</div><div class="line">- </div><div class="line"></div><div class="line"></div><div class="line">### 5. 查看远程仓库信息</div></pre></td></tr></table></figure></p><p>git remote [-v] // 显示远程仓库信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 6. 建立本地分支和远程分支的关联</div><div class="line"></div><div class="line">在本地仓库中的分支和远程仓库中的分支是对应的。一般情况下，远程仓库中的分支名称和本地仓库中的分支名称是一致的。</div><div class="line"></div><div class="line">有的时候，我们会需要指定本地分支与远程分支的关联。</div></pre></td></tr></table></figure></p><p>git branch –set-upstream ‘local_branch’ origin/remote_branch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 7. 修改本地仓库对应的远程仓库地址</div><div class="line"></div><div class="line">当远程的仓库地址发生变化时，需要修改本地仓库对应的远程仓库的地址。主要应用在工程迁移过程中。</div></pre></td></tr></table></figure></p><p>git remote set-url origin url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">---</div><div class="line">## 5.标签管理</div><div class="line"></div><div class="line">### 1. 创建标签</div></pre></td></tr></table></figure></p><p>git tag -a ‘tagname’ -m ‘comment’ ‘commit_id’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">`a` 参数指定标签名， `-m` 添加备注信息， &apos;commit_id&apos; 指定打标签的提交。</div><div class="line"></div><div class="line">### 2. 查看所有标签</div></pre></td></tr></table></figure></p><p>git tag // 查看本地仓库中的所有标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">### 3. 查看具体标签信息</div></pre></td></tr></table></figure></p><p>git show tagname<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">### 4. 删除本地标签</div><div class="line"></div><div class="line">如果打的标签出错，或者不在需要某个标签，则可以删除它。</div></pre></td></tr></table></figure></p><p>git tag -d tagname<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">### 5. 删除远程标签</div></pre></td></tr></table></figure></p><p>git push origin :refs/tags/tagname</p><p>git push origin –delete tagname</p><p>git push origin :tagname</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">### 6. 推送标签到远程仓库</div><div class="line"></div><div class="line">打完标签以后，有需要推送到远程仓库。</div><div class="line"></div><div class="line">1. 推送单个标签到远程仓库</div></pre></td></tr></table></figure><p> git push origin tagname<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 一次性推送所有标签到远程仓库</div></pre></td></tr></table></figure></p><p>git push origin –tags</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line"> </div><div class="line"></div><div class="line">---</div><div class="line">## 6.标签管理</div><div class="line">### 1. 临时保存修改</div><div class="line"></div><div class="line">在执行很多的 Git 操作的时候，是需要保持当前操作的仓库/分支处于 clean 状态，及没有未提交的修改。如 `git pull`， `git merge` 等等，如果有未提交的修改，这些将无法操作。</div><div class="line"></div><div class="line">但是做这些事情的时候，你可能修改了比较多的代码，却又不想丢弃它。那么，你需要把这些修改临时保存起来，这就需要用到 `git stash`。</div><div class="line"></div><div class="line">1. 临时保存修改，这样仓库就可以回到 clean 状态。</div></pre></td></tr></table></figure><p>git stash // 保存本地仓库中的临时修改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">2. 查看临时保存。当你临时保存以后，后面还是要取回来的，那它们在哪里呢？</div></pre></td></tr></table></figure></p><p>git stash list // 显示所有临时修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">3. 当我们处理完其他操作时，想要恢复临时保存的修改。</div></pre></td></tr></table></figure></p><p>git stash apply        // 恢复所有保存的临时修改<br>git stash pop        // 恢复最近一次保存的临时修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line">4. 或者，我们后面觉得临时保存不想要了，那可以丢弃它。</div></pre></td></tr></table></figure></p><p>git stash clear // 丢弃所有保存的临时修改<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Git-常用命令整理&quot;&gt;&lt;a href=&quot;#Git-常用命令整理&quot; class=&quot;headerlink&quot; title=&quot;Git 常用命令整理&quot;&gt;&lt;/a&gt;Git 常用命令整理&lt;/h1&gt;&lt;h2 id=&quot;1-Git-配置&quot;&gt;&lt;a href=&quot;#1-Git-配置&quot; cla
      
    
    </summary>
    
      <category term="Other" scheme="http://www.jingtaobar.com/categories/Other/"/>
    
    
      <category term="git" scheme="http://www.jingtaobar.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>es6学习笔记</title>
    <link href="http://www.jingtaobar.com/2017/11/09/es6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.jingtaobar.com/2017/11/09/es6学习笔记/</id>
    <published>2017-11-09T11:34:25.000Z</published>
    <updated>2017-11-17T01:44:32.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Javascript" scheme="http://www.jingtaobar.com/categories/Javascript/"/>
    
    
      <category term="es6" scheme="http://www.jingtaobar.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>hexo的使用</title>
    <link href="http://www.jingtaobar.com/2017/06/13/hexo%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.jingtaobar.com/2017/06/13/hexo的使用/</id>
    <published>2017-06-12T17:07:40.000Z</published>
    <updated>2017-11-17T01:44:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><ul><li>hexo n “我的博客” == hexo new “我的博客” #新建文章</li><li>hexo p == hexo publish</li><li>hexo g == hexo generate#生成</li><li>hexo s == hexo server #启动服务预览</li><li>hexo d == hexo deploy#部署</li></ul><h2 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h2><ul><li>hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</li><li>hexo server -s #静态模式</li><li>hexo server -p 5000 #更改端口</li><li>hexo server -i 192.168.1.1 #自定义 IP</li><li>hexo clean #清除缓存 网页正常情况下可以忽略此条命令</li><li>hexo g #生成静态网页</li><li>hexo d #开始部署</li></ul><h2 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h2><ul><li>hexo generate #使用 Hexo 生成静态文件快速而且简单</li><li>hexo generate –watch #监视文件变动</li></ul><h2 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h2><p>两个命令的作用是相同的</p><ul><li>hexo generate –deploy</li><li>hexo deploy –generate</li><li>hexo deploy -g</li><li>hexo server -g</li></ul><h2 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h2><ul><li>hexo publish [layout] title</li></ul><h2 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h2><ul><li>hexo new “postName” #新建文章</li><li>hexo new page “pageName” #新建页面</li><li>hexo generate #生成静态页面至public目录</li><li>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</li><li>hexo deploy #将.deploy目录部署到GitHub</li><li>hexo new [layout] title</li><li>hexo new photo “My Gallery”</li><li>hexo new “Hello World” –lang tw</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">title: 使用Hexo搭建个人博客    <span class="comment">//标题</span></div><div class="line">layout: post                <span class="comment">//</span></div><div class="line">date: <span class="number">2014</span><span class="number">-03</span><span class="number">-03</span> <span class="number">19</span>:<span class="number">07</span>:<span class="number">43</span>   <span class="comment">//时间</span></div><div class="line">comments: <span class="literal">true</span>              <span class="comment">//评论</span></div><div class="line">categories: Blog            <span class="comment">//类别</span></div><div class="line">tags: [Hexo]                <span class="comment">//标签</span></div><div class="line">keywords: Hexo, Blog        <span class="comment">//关键词</span></div><div class="line">description: 生命在于折腾，又把博客折腾到Hexo了。给Hexo点赞。 <span class="comment">//描述</span></div></pre></td></tr></table></figure><p>还没写完有空再来完善</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HEXO&quot;&gt;&lt;a href=&quot;#HEXO&quot; class=&quot;headerlink&quot; title=&quot;HEXO&quot;&gt;&lt;/a&gt;HEXO&lt;/h1&gt;&lt;h2 id=&quot;简写&quot;&gt;&lt;a href=&quot;#简写&quot; class=&quot;headerlink&quot; title=&quot;简写&quot;&gt;&lt;/a&gt;简写&lt;/h
      
    
    </summary>
    
      <category term="Other" scheme="http://www.jingtaobar.com/categories/Other/"/>
    
    
      <category term="hexo" scheme="http://www.jingtaobar.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>vue的父子组件数据传递</title>
    <link href="http://www.jingtaobar.com/2017/05/04/vue%E7%9A%84%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/"/>
    <id>http://www.jingtaobar.com/2017/05/04/vue的父子组件数据传递/</id>
    <published>2017-05-04T14:51:59.000Z</published>
    <updated>2017-11-17T01:44:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue的父子组件数据传递"><a href="#vue的父子组件数据传递" class="headerlink" title="vue的父子组件数据传递"></a>vue的父子组件数据传递</h1><h2 id="父组件监听-子组件出发"><a href="#父组件监听-子组件出发" class="headerlink" title="父组件监听  子组件出发"></a>父组件监听  子组件出发</h2><p>Prop<br>12345  数据传递  父传子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Super</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-model</span>=<span class="string">“supermsg”</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span>             1</div><div class="line">      <span class="tag">&lt;<span class="name">children</span> <span class="attr">:childmsg</span>=<span class="string">“supermsg”</span>&gt;</span><span class="tag">&lt;/<span class="name">children</span>&gt;</span>  3</div><div class="line"></div><div class="line">      data:supermsg                               2</div><div class="line"></div><div class="line">Child</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> &gt;</span> &#123;&#123; childmsg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>                  5</div><div class="line"></div><div class="line">      prop:[childmsg]                             4</div></pre></td></tr></table></figure><h2 id="子组件触发-父组件更新"><a href="#子组件触发-父组件更新" class="headerlink" title="子组件触发  父组件更新"></a>子组件触发  父组件更新</h2><p>$emit<br>1234 事件传递    子传父</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Super</div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span> &#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">children</span> @<span class="attr">childadd</span>=<span class="string">“superadd”</span>&gt;</span><span class="tag">&lt;/<span class="name">children</span>&gt;</span>  3  监听</div><div class="line"></div><div class="line">Metheds:</div><div class="line">superadd()&#123;</div><div class="line">       this.num++                                 4  增加</div><div class="line">&#125;</div><div class="line"></div><div class="line">Child</div><div class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">‘childadd’</span> &gt;</span> <span class="tag">&lt;/<span class="name">button</span>&gt;</span>         1  点击</div><div class="line"></div><div class="line">    Metheds:&#123;</div><div class="line">    childadd:this.$emit(‘childadd’)               2  触发</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vue的父子组件数据传递&quot;&gt;&lt;a href=&quot;#vue的父子组件数据传递&quot; class=&quot;headerlink&quot; title=&quot;vue的父子组件数据传递&quot;&gt;&lt;/a&gt;vue的父子组件数据传递&lt;/h1&gt;&lt;h2 id=&quot;父组件监听-子组件出发&quot;&gt;&lt;a href=&quot;#父组
      
    
    </summary>
    
      <category term="Javascript" scheme="http://www.jingtaobar.com/categories/Javascript/"/>
    
    
      <category term="vue" scheme="http://www.jingtaobar.com/tags/vue/"/>
    
  </entry>
  
</feed>
